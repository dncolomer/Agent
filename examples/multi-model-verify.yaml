# Multi-Model Verification Configuration
# This configuration demonstrates a sophisticated setup with multiple specialized
# agents for both building and verification, using both remote and local models.

# Project metadata
project:
  name: simple-task-api
  description: >
    A simple RESTful API for task management with CRUD operations,
    user authentication, and basic reporting functionality.

# Builder agents configuration with specialized roles
build:
  # High-level objective shared by all builder agents
  overarching_team_goal: >
    Create a simple but robust task management API using Python and Flask,
    with proper error handling, input validation, authentication, and
    comprehensive documentation. The system should follow REST principles
    and include basic unit tests.
  
  agents:
    count: 3  # Total number of builder agents
    # Define specific models and specialized roles
    models:
      - name: openai/gpt-4o
        count: 1  # Architecture and core API specialist
        temperature: 0.2  # Low temperature for precise architectural decisions
        individual_agent_goal: >
          Design the overall API architecture, define the data models,
          and implement the core API endpoints with proper validation
          and error handling. Focus on security best practices.
          
      - name: anthropic/claude-3-sonnet
        count: 1  # Business logic specialist
        temperature: 0.4
        individual_agent_goal: >
          Implement the business logic layer, authentication system,
          and database interactions. Ensure proper separation of concerns
          and robust error handling throughout the codebase.
          
      - name: openai/gpt-3.5-turbo
        count: 1  # Documentation and testing specialist
        temperature: 0.5
        individual_agent_goal: >
          Create comprehensive API documentation, implement unit tests,
          and add helpful comments throughout the codebase. Focus on
          making the API easy to understand and use.
    
    temperature: 0.4  # Default temperature (overridden by model-specific settings)
  
  constraints:
    max_cost_usd: 5.0
    max_runtime_min: 30
    allowed_languages:
      - python
      - markdown
      - yaml
      - sql
    target_directory: ./task-api-output
    dependencies:
      python:
        - flask>=2.0.0
        - flask-restful>=0.3.9
        - flask-sqlalchemy>=3.0.0
        - flask-jwt-extended>=4.4.0
        - pytest>=7.0.0

# Verifier agents configuration with specialized roles and both remote/local models
verify:
  strategy: parallel  # Run verification in parallel with building
  agents:
    count: 4  # Total number of verifier agents
    # Define specialized verifier roles with different models
    models:
      - name: anthropic/claude-3-sonnet
        count: 1  # Security verification specialist
        temperature: 0.1  # Very low temperature for strict verification
        individual_agent_goal: >
          Focus on identifying security vulnerabilities including authentication
          weaknesses, input validation flaws, SQL injection risks, and other
          OWASP top 10 vulnerabilities. Provide specific remediation steps.
          
      - name: openai/gpt-4o
        count: 1  # Code quality and best practices verifier
        temperature: 0.2
        individual_agent_goal: >
          Ensure code follows Python best practices, proper error handling,
          and maintainable structure. Identify potential bugs, edge cases,
          and performance bottlenecks. Suggest improvements for readability.
          
      - name: local/codellama-7b
        count: 1  # Documentation verifier
        temperature: 0.3
        individual_agent_goal: >
          Verify API documentation completeness, accuracy, and clarity.
          Check for missing endpoint documentation, parameter descriptions,
          and example requests/responses. Suggest improvements for clarity.
          
      - name: local/mistral-7b
        count: 1  # Test coverage verifier
        temperature: 0.2
        individual_agent_goal: >
          Analyze test coverage and completeness. Identify untested code paths,
          missing edge cases, and insufficient assertions. Suggest additional
          tests to improve coverage and robustness.
  
# Local models configuration
local_models:
  - name: codellama-7b
    path: http://localhost:8000/v1
    api_type: vllm
  
  - name: mistral-7b
    path: http://localhost:11434/api/chat
    api_type: ollama

# Comprehensive logging configuration for debugging
logging:
  level: debug  # Enable detailed logging
  format: json  # Structured logs for machine processing
  sink:
    type: file
    path: logs/multi-model-verify.ndjson
    rotation:
      max_size_mb: 10
      max_files: 3
  additional_sinks:
    - type: stdout
      format: pretty  # Human-readable format for console output

# Event tracking configuration
events:
  track_consumption: true  # Track event consumption metrics
  history_limit: 10000     # Keep history of last 10000 events
  buffer_size: 1000        # Event buffer size
