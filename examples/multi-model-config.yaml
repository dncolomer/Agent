# Multi-Model Agent Configuration
# This configuration demonstrates a sophisticated setup with multiple specialized
# agents for both building and verification, with clear goals and rich logging.

# Project metadata
project:
  name: microservice-ecommerce
  description: >
    A comprehensive microservice-based e-commerce platform with user authentication,
    product catalog, shopping cart, payment processing, order management, and analytics.

# Builder agents configuration with specialized roles
build:
  # High-level objective shared by all builder agents
  overarching_team_goal: >
    Create a scalable, maintainable microservice architecture for an e-commerce platform
    that follows best practices in software design, security, and performance. The system
    should be modular, well-documented, and include comprehensive tests.
  
  agents:
    count: 7  # Total number of builder agents
    # Define specific models and specialized roles
    models:
      - name: openai/gpt-4o
        count: 1  # Architecture specialist
        temperature: 0.2  # Low temperature for precise architectural decisions
        individual_agent_goal: >
          Design the overall system architecture, define service boundaries,
          API contracts, and data models. Create architectural diagrams and
          ensure the system follows microservice best practices.
          
      - name: anthropic/claude-3-opus
        count: 1  # Backend services specialist
        temperature: 0.3
        individual_agent_goal: >
          Implement core backend services including authentication, product catalog,
          and order processing. Focus on robust error handling, performance optimization,
          and security best practices.
          
      - name: anthropic/claude-3-sonnet
        count: 2  # API and integration specialists
        temperature: 0.4
        individual_agent_goal: >
          Develop API gateways, service-to-service communication, and third-party
          integrations. Ensure consistent error handling, proper validation, and
          comprehensive API documentation.
          
      - name: openai/gpt-4-turbo
        count: 1  # Database and data modeling specialist
        temperature: 0.3
        individual_agent_goal: >
          Design database schemas, data access layers, and caching strategies.
          Optimize for performance, data integrity, and scalability while
          maintaining proper separation of concerns.
          
      - name: google/gemini-pro
        count: 1  # Frontend specialist
        temperature: 0.5
        individual_agent_goal: >
          Develop responsive, accessible frontend components and client-side
          logic. Ensure proper state management, error handling, and a
          consistent user experience across devices.
          
      - name: anthropic/claude-3-haiku
        count: 1  # Documentation and testing specialist
        temperature: 0.4
        individual_agent_goal: >
          Create comprehensive documentation, including API references,
          developer guides, and deployment instructions. Implement unit,
          integration, and end-to-end tests with high coverage.
    
    temperature: 0.4  # Default temperature (overridden by model-specific settings)
  
  constraints:
    max_cost_usd: 25.0  # Higher budget for complex project
    max_runtime_min: 120  # Two hour maximum runtime
    allowed_languages:
      - python
      - typescript
      - javascript
      - sql
      - yaml
      - markdown
    target_directory: ./microservice-ecommerce-output
    dependencies:
      python:
        - fastapi>=0.100.0
        - sqlalchemy>=2.0.0
        - pydantic>=2.0.0
        - pytest>=7.0.0
      typescript:
        - react>=18.0.0
        - next>=13.0.0
        - zod>=3.0.0

# Verifier agents configuration with specialized roles
verify:
  strategy: parallel  # Run verification in parallel with building
  agents:
    count: 3  # Multiple specialized verifier agents
    # Define specialized verifier roles
    models:
      - name: anthropic/claude-3-opus
        count: 1  # Security and performance verifier
        temperature: 0.1  # Very low temperature for strict verification
        individual_agent_goal: >
          Identify security vulnerabilities, performance bottlenecks, and
          architectural anti-patterns. Focus on authentication/authorization
          issues, input validation, SQL injection, XSS, and other OWASP top 10
          vulnerabilities. Provide specific, actionable remediation steps.
          
      - name: openai/gpt-4o
        count: 1  # Code quality and best practices verifier
        temperature: 0.2
        individual_agent_goal: >
          Ensure code follows best practices, design patterns, and style
          guidelines. Check for proper error handling, logging, comments,
          and maintainability. Suggest refactorings that improve readability
          and reduce complexity.
          
      - name: anthropic/claude-3-sonnet
        count: 1  # Documentation and testing verifier
        temperature: 0.3
        individual_agent_goal: >
          Verify documentation completeness, accuracy, and clarity. Ensure
          tests cover critical paths, edge cases, and error conditions.
          Check for missing tests, inadequate assertions, and unclear
          documentation. Suggest improvements for test coverage and docs.
  
  tests:
    - type: unit
      path: tests/unit/
      timeout_sec: 60
    - type: integration
      path: tests/integration/
      timeout_sec: 120
    - type: security
      path: tests/security/
      timeout_sec: 180
  
  thresholds:
    min_test_coverage: 85.0
    max_critical_issues: 0
    max_high_issues: 5

# Operator agents configuration (minimal for this example)
operate:
  runtime: local
  operator_agents:
    count: 0  # Disabled for this example

# Comprehensive logging configuration
logging:
  level: debug  # Enable detailed logging
  format: json  # Structured logs for machine processing
  sink:
    type: file
    path: logs/microservice-ecommerce.ndjson
    rotation:
      max_size_mb: 100
      max_files: 5
  additional_sinks:
    - type: stdout
      format: pretty  # Human-readable format for console output
    - type: file
      path: logs/summary.log
      format: pretty
      level: info  # Higher level for summary logs

# Event tracking configuration
events:
  track_consumption: true  # Track event consumption metrics
  history_limit: 10000     # Keep history of last 10000 events
  buffer_size: 1000        # Event buffer size
