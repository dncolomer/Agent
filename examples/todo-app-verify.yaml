# Multi-Modal Verification Configuration for a Simple TODO App
# This configuration sets up specialized builder and operator agents
# to create and verify a simple in-memory TODO application.

project:
  name: simple-todo-app

# High-level objective shared by ALL agents
overarching_team_goal: >
  Create a simple, functional TODO application with an in-memory backend,
  a clean user interface. Make sure the app support the following features: Create a TODO, Edit a TODO, Delete a TODO. Do not include any other features

# Builder and operator agents
agents:
  # Builder 1 – backend
  - type: builder
    model: openrouter/auto
    count: 1
    temperature: 0.3
    goal: >
      Implement an in-memory Flask API with CRUD routes.

  # Builder 2 – frontend
  - type: builder
    model: openrouter/auto
    count: 1
    temperature: 0.3
    goal: >
      Build a simple React UI that talks to the API.

  # Operator 1 – end-to-end tester
  - type: operator
    model: openrouter/auto
    count: 1
    temperature: 0.15
    goal: >
      Ensure backend and frontend integrate flawlessly; validate CRUD
      functionality. Is enough to validate it statically by looking at the code.

# Global constraints
constraints:
  max_cost_usd: 10.0
  max_runtime_min: 30
  target_directory: ./todo-app-output

# Logging configuration for comprehensive debugging
logging:
  level: debug  # Enable detailed logging
  format: json  # Structured logs for machine processing
  sink:
    type: file
    path: logs/todo-app-verify.ndjson
    rotation:
      max_size_mb: 10
      max_files: 3
  # Duplicate logs to console as well
  additional_sinks:
    - type: stdout
      format: json     # keep structured output on console too

# Visualization settings – automatically render collaboration diagrams
visualization:
  enabled: true            # Turn on auto-visualization at the end of the run
  type: both               # Generate both network graph and timeline
  output_directory: ./visualizations  # Where to save PNG files
